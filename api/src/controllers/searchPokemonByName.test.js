// Generated by CodiumAI

describe("getPokemonByName", () => {});

// Search for a pokemon with a name that has different capitalization than in the database and return its data
it("should return the data of a pokemon with different capitalization in the name", async () => {
  const req = {
    query: {
      name: "pikachu",
    },
  };

  const res = {
    status: jest.fn().mockReturnThis(),
    json: jest.fn(),
  };

  const dbPokemon = {
    name: "Pikachu",
    hp: 35,
    attack: 55,
    defense: 40,
  };

  const dbTypes = [{ name: "Electric" }, { name: "Normal" }];

  const axiosResponse = {
    data: {
      name: "pikachu",
      sprites: {
        front_default: "https://pokeapi.co/media/sprites/pokemon/25.png",
      },
      stats: [
        { stat: { name: "hp" }, base_stat: 35 },
        { stat: { name: "attack" }, base_stat: 55 },
        { stat: { name: "defense" }, base_stat: 40 },
      ],
      types: [{ type: { name: "electric" } }, { type: { name: "normal" } }],
    },
  };

  Pokemon.findOne = jest.fn().mockResolvedValue(dbPokemon);
  dbPokemon.getTypes = jest.fn().mockResolvedValue(dbTypes);
  axios.get = jest.fn().mockResolvedValue(axiosResponse);

  await getPokemonByName(req, res);

  expect(Pokemon.findOne).toHaveBeenCalledWith({ where: { name: "pikachu" } });
  expect(dbPokemon.getTypes).toHaveBeenCalled();
  expect(res.status).toHaveBeenCalledWith(200);
  expect(res.json).toHaveBeenCalledWith({
    name: "Pikachu",
    hp: 35,
    attack: 55,
    defense: 40,
    types: ["Electric", "Normal"],
  });
});
